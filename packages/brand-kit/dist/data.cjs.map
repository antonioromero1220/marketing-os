{"version":3,"sources":["../src/data.ts"],"sourcesContent":["/**\n * @growthub/brand-kit/data\n * Brand Data Coordination and Management Utilities\n * \n * Professional brand data patterns extracted from the AT-03 production system.\n * Provides secure brand kit operations with user isolation and validation.\n */\n\nimport { z } from 'zod'\n\n// Re-use existing validation schemas from the main app\nexport const BrandKitInsertSchema = z.object({\n  user_id: z.string().uuid(),\n  brand_name: z.string().min(1, 'Brand name is required').max(100, 'Brand name too long'),\n  colors: z.any().nullable().default(null), // JSON type in database\n  fonts: z.any().nullable().default(null),  // JSON type in database\n  messaging: z.string().nullable().default(null),\n})\n\nexport const BrandKitDataSchema = BrandKitInsertSchema.extend({\n  id: z.string().uuid(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n})\n\nexport const BrandKitUpdateSchema = z.object({\n  brand_name: z.string().min(1).max(100).optional(),\n  colors: z.any().nullable().optional(),\n  fonts: z.any().nullable().optional(),\n  messaging: z.string().nullable().optional(),\n  updated_at: z.string().datetime().optional(),\n})\n\nexport const BrandAssetSchema = z.object({\n  id: z.string().uuid(),\n  brand_kit_id: z.string().uuid(),\n  asset_type: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  asset_url: z.string().url(),\n  storage_path: z.string(),\n  metadata: z.any().nullable().default(null),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n})\n\nexport const BrandAssetInsertSchema = z.object({\n  brand_kit_id: z.string().uuid(),\n  asset_type: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  asset_url: z.string().url(),\n  storage_path: z.string(),\n  metadata: z.any().nullable().default(null),\n})\n\nexport const BrandContextSchema = z.object({\n  brand_name: z.string(),\n  colors: z.array(z.string()).default([]),\n  messaging: z.string().nullable().default(null),\n  referenceImages: z.array(z.object({\n    url: z.string(),\n    type: z.string(),\n    description: z.string()\n  })).default([])\n})\n\nexport const BrandDataToolResultSchema = z.object({\n  success: z.boolean(),\n  message: z.string().optional(),\n  brandKit: z.object({\n    id: z.string(),\n    brandName: z.string(),\n    colors: z.any().optional(),\n    fonts: z.any().optional(), \n    messaging: z.string().nullable().optional(),\n    createdAt: z.string(),\n    updatedAt: z.string(),\n  }).nullable(),\n  assets: z.array(z.object({\n    id: z.string(),\n    assetType: z.string(),\n    assetUrl: z.string(),\n    metadata: z.any().nullable(),\n    createdAt: z.string()\n  })).default([])\n})\n\nexport type BrandKitData = z.infer<typeof BrandKitDataSchema>\nexport type BrandKitInsert = z.infer<typeof BrandKitInsertSchema>\nexport type BrandKitUpdate = z.infer<typeof BrandKitUpdateSchema>\nexport type BrandAsset = z.infer<typeof BrandAssetSchema>\nexport type BrandAssetInsert = z.infer<typeof BrandAssetInsertSchema>\nexport type BrandContext = z.infer<typeof BrandContextSchema>\nexport type BrandDataToolResult = z.infer<typeof BrandDataToolResultSchema>\n\n// Simplified database client interface that matches Supabase\nexport interface BrandDatabaseClient {\n  from(table: string): TableBuilder\n}\n\ninterface TableBuilder {\n  select(columns?: string): SelectQueryBuilder\n  insert(data: any): InsertBuilder\n  update(data: any): UpdateQueryBuilder\n  delete(): DeleteQueryBuilder\n}\n\ninterface SelectQueryBuilder {\n  eq(column: string, value: any): SelectQueryBuilder\n  order(column: string, options?: { ascending: boolean }): SelectQueryBuilder\n  single(): Promise<{ data: any; error: any }>\n  limit(count: number): SelectQueryBuilder\n}\n\ninterface InsertBuilder {\n  select(): { single(): Promise<{ data: any; error: any }> }\n}\n\ninterface UpdateQueryBuilder {\n  eq(column: string, value: any): UpdateQueryBuilder\n  select(): { single(): Promise<{ data: any; error: any }> }\n}\n\ninterface DeleteQueryBuilder {\n  eq(column: string, value: any): DeleteQueryBuilder\n}\n\ninterface DeleteResult {\n  error: any\n}\n\n/**\n * Brand Data Manager Class\n * Provides secure brand kit operations with user isolation\n */\nexport class BrandDataManager {\n  private client: BrandDatabaseClient\n\n  constructor(databaseClient: BrandDatabaseClient) {\n    this.client = databaseClient\n  }\n\n  /**\n   * Get all brand kits for a user with ownership validation\n   */\n  async getBrandKits(userId: string): Promise<BrandKitData[]> {\n    try {\n      const query = this.client\n        .from('brand_kits')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        \n      // Note: This assumes the SelectQueryBuilder implements a promise for non-single queries\n      const result = await (query as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to fetch brand kits: ${result.error.message}`)\n      }\n      \n      return (result?.data || []).map((item: any) => BrandKitDataSchema.parse(item))\n    } catch (error) {\n      console.error('[getBrandKits] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get a specific brand kit by ID with ownership validation\n   */\n  async getBrandKitById(userId: string, brandKitId: string): Promise<BrandKitData | null> {\n    try {\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .select('*')\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        .single()\n      \n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new Error(`Failed to fetch brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[getBrandKitById] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Create a new brand kit with user assignment\n   */\n  async createBrandKit(userId: string, brandData: Omit<BrandKitInsert, 'user_id'>): Promise<BrandKitData> {\n    try {\n      const insertData = BrandKitInsertSchema.parse({\n        ...brandData,\n        user_id: userId\n      })\n\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .insert({\n          ...insertData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to create brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[createBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Update an existing brand kit with ownership validation\n   */\n  async updateBrandKit(userId: string, brandKitId: string, updates: BrandKitUpdate): Promise<BrandKitData> {\n    try {\n      const updateData = BrandKitUpdateSchema.parse({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .update(updateData)\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to update brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[updateBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Delete a brand kit with ownership validation\n   */\n  async deleteBrandKit(userId: string, brandKitId: string): Promise<boolean> {\n    try {\n      const deleteQuery = this.client\n        .from('brand_kits')\n        .delete()\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        \n      // Note: This assumes the DeleteQueryBuilder implements a promise\n      const result = await (deleteQuery as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to delete brand kit: ${result.error.message}`)\n      }\n      \n      return true\n    } catch (error) {\n      console.error('[deleteBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get brand assets for a specific brand kit with ownership validation\n   */\n  async getBrandAssets(userId: string, brandKitId: string, assetTypes?: string[]): Promise<BrandAsset[]> {\n    try {\n      // First verify brand kit ownership\n      const brandKit = await this.getBrandKitById(userId, brandKitId)\n      if (!brandKit) {\n        throw new Error('Brand kit not found or access denied')\n      }\n\n      const query = this.client\n        .from('brand_assets')\n        .select('*')\n        .eq('brand_kit_id', brandKitId)\n        \n      // Note: This assumes the SelectQueryBuilder implements a promise for non-single queries\n      const result = await (query as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to fetch brand assets: ${result.error.message}`)\n      }\n      \n      let assets = (result?.data || []).map((item: any) => BrandAssetSchema.parse(item))\n      \n      // Client-side filtering if assetTypes specified\n      if (assetTypes && assetTypes.length > 0) {\n        assets = assets.filter((asset: BrandAsset) => assetTypes.includes(asset.asset_type))\n      }\n      \n      return assets\n    } catch (error) {\n      console.error('[getBrandAssets] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Create a brand asset with ownership validation\n   */\n  async createBrandAsset(userId: string, assetData: BrandAssetInsert): Promise<BrandAsset> {\n    try {\n      // Verify brand kit ownership\n      const brandKit = await this.getBrandKitById(userId, assetData.brand_kit_id)\n      if (!brandKit) {\n        throw new Error('Brand kit not found or access denied')\n      }\n\n      const insertData = BrandAssetInsertSchema.parse(assetData)\n\n      const { data, error } = await this.client\n        .from('brand_assets')\n        .insert({\n          ...insertData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to create brand asset: ${error.message}`)\n      }\n      \n      return BrandAssetSchema.parse(data)\n    } catch (error) {\n      console.error('[createBrandAsset] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Transform brand kit data to brand context for agent integration\n   */\n  transformToBrandContext(brandKit: BrandKitData | null, assets: BrandAsset[] = []): BrandContext {\n    if (!brandKit) {\n      return {\n        brand_name: 'Your Brand',\n        colors: [],\n        messaging: null,\n        referenceImages: []\n      }\n    }\n\n    return {\n      brand_name: brandKit.brand_name,\n      colors: brandKit.colors ? Object.values(brandKit.colors).filter(Boolean) as string[] : [],\n      messaging: brandKit.messaging,\n      referenceImages: assets.map(asset => ({\n        url: asset.asset_url,\n        type: asset.asset_type,\n        description: asset.metadata?.description || asset.asset_type\n      }))\n    }\n  }\n\n  /**\n   * Transform brand data to tool result format\n   */\n  transformToBrandDataToolResult(brandKit: BrandKitData | null, assets: BrandAsset[] = []): BrandDataToolResult {\n    return {\n      success: true,\n      brandKit: brandKit ? {\n        id: brandKit.id,\n        brandName: brandKit.brand_name,\n        colors: brandKit.colors,\n        fonts: brandKit.fonts,\n        messaging: brandKit.messaging,\n        createdAt: brandKit.created_at,\n        updatedAt: brandKit.updated_at\n      } : null,\n      assets: assets.map(asset => ({\n        id: asset.id,\n        assetType: asset.asset_type,\n        assetUrl: asset.asset_url,\n        metadata: asset.metadata,\n        createdAt: asset.created_at\n      }))\n    }\n  }\n}\n\n/**\n * Default brand kit data for new users\n */\nexport const DEFAULT_BRAND_KIT_DATA: Partial<BrandKitInsert> = {\n  brand_name: 'My New Brand',\n  colors: {\n    primary: '#3B82F6',\n    secondary: '#8B5CF6',\n    accent: '#06B6D4',\n    neutral: '#6B7280'\n  },\n  fonts: {\n    heading: 'Inter',\n    body: 'Inter',\n    accent: 'Roboto'\n  },\n  messaging: null\n}\n\n/**\n * Utility functions for brand data operations\n */\nexport const BrandDataUtils = {\n  /**\n   * Validate brand kit ownership\n   */\n  validateOwnership: (brandKit: BrandKitData, userId: string): boolean => {\n    return brandKit.user_id === userId\n  },\n\n  /**\n   * Generate storage path for brand assets\n   */\n  generateAssetStoragePath: (userId: string, brandKitId: string, assetType: string, fileName: string): string => {\n    const timestamp = Date.now()\n    const sanitizedFileName = fileName\n      .replace(/[^a-zA-Z0-9.-]/g, '_')\n      .replace(/_+/g, '_')\n      .substring(0, 100)\n    return `public/${userId}/brand_assets/${brandKitId}/${assetType}/${timestamp}_${sanitizedFileName}`\n  },\n\n  /**\n   * Extract brand colors as array\n   */\n  extractBrandColors: (brandKit: BrandKitData | null): string[] => {\n    if (!brandKit || !brandKit.colors) return []\n    return Object.values(brandKit.colors).filter(Boolean) as string[]\n  },\n\n  /**\n   * Check if brand kit is complete\n   */\n  isBrandKitComplete: (brandKit: BrandKitData): boolean => {\n    return !!(brandKit.brand_name && brandKit.colors && Object.keys(brandKit.colors).length > 0)\n  },\n\n  /**\n   * Calculate brand strength score\n   */\n  calculateBrandStrength: (brandKit: BrandKitData, assets: BrandAsset[]): 'weak' | 'moderate' | 'strong' | 'excellent' => {\n    let score = 0\n    \n    // Brand name (required)\n    if (brandKit.brand_name && brandKit.brand_name.length > 3) score += 20\n    \n    // Colors\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 2) score += 25\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 4) score += 10\n    \n    // Fonts\n    if (brandKit.fonts && Object.keys(brandKit.fonts).length >= 1) score += 15\n    \n    // Messaging\n    if (brandKit.messaging && brandKit.messaging.length > 20) score += 15\n    \n    // Assets\n    const logoAssets = assets.filter(a => a.asset_type === 'logo')\n    if (logoAssets.length > 0) score += 15\n    if (assets.length > 2) score += 10\n    \n    if (score >= 85) return 'excellent'\n    if (score >= 65) return 'strong'\n    if (score >= 40) return 'moderate'\n    return 'weak'\n  }\n} "],"mappings":"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","names":[]}