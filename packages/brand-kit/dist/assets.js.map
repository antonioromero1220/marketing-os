{"version":3,"sources":["../src/assets.ts"],"sourcesContent":["/**\n * @growthub/brand-kit/assets\n * Brand Asset Management and File Operations\n * \n * Professional asset management patterns extracted from the AT-03 production system.\n * Provides secure file upload, storage coordination, and asset serving utilities.\n */\n\nimport { z } from 'zod'\n\n// Asset Type Enum\nexport type BrandAssetType = 'logo' | 'product_photo' | 'lifestyle_image' | 'icon' | 'banner'\n\n// File Upload Schema\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File),\n  assetType: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  title: z.string().optional(),\n  description: z.string().optional(),\n})\n\nexport type FileUploadData = z.infer<typeof FileUploadSchema>\n\n// Asset Metadata Schema\nexport const AssetMetadataSchema = z.object({\n  file_name: z.string(),\n  file_size: z.number().int().positive(),\n  file_type: z.string(),\n  uploaded_at: z.string().datetime(),\n  width: z.number().int().positive().optional(),\n  height: z.number().int().positive().optional(),\n  alt_text: z.string().optional(),\n  title: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n})\n\nexport type AssetMetadata = z.infer<typeof AssetMetadataSchema>\n\n// Upload Result Schema\nexport const UploadResultSchema = z.object({\n  success: z.boolean(),\n  assetUrl: z.string().url().optional(),\n  storagePath: z.string().optional(),\n  assetId: z.string().uuid().optional(),\n  error: z.object({\n    message: z.string(),\n    code: z.string(),\n    details: z.any().optional()\n  }).optional()\n})\n\nexport type UploadResult = z.infer<typeof UploadResultSchema>\n\n// Storage Client Interface\nexport interface StorageClient {\n  upload(path: string, file: File, options?: { \n    cacheControl?: string; \n    upsert?: boolean \n  }): Promise<{ error: any }>\n  \n  getPublicUrl(path: string): { \n    data: { publicUrl: string } \n  }\n  \n  remove(paths: string[]): Promise<{ error: any }>\n}\n\n// Asset Storage Configuration\nexport interface AssetStorageConfig {\n  bucket: string\n  pathPrefix: string\n  allowedTypes: string[]\n  maxFileSize: number // in bytes\n  cacheControl: string\n}\n\n/**\n * Brand Asset Manager Class\n * Handles file upload, storage coordination, and asset management\n */\nexport class BrandAssetManager {\n  private storageClient: StorageClient\n  private config: AssetStorageConfig\n\n  constructor(\n    storageClient: StorageClient,\n    config?: Partial<AssetStorageConfig>\n  ) {\n    this.storageClient = storageClient\n    this.config = {\n      bucket: 'node_documents',\n      pathPrefix: 'public',\n      allowedTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/svg+xml'],\n      maxFileSize: 10 * 1024 * 1024, // 10MB\n      cacheControl: '3600',\n      ...config\n    }\n  }\n\n  /**\n   * Validate file before upload\n   */\n  validateFile(file: File): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    // Check file type\n    if (!this.config.allowedTypes.includes(file.type)) {\n      errors.push(`Invalid file type. Allowed types: ${this.config.allowedTypes.join(', ')}`)\n    }\n\n    // Check file size\n    if (file.size > this.config.maxFileSize) {\n      errors.push(`File too large. Maximum size: ${this.config.maxFileSize / (1024 * 1024)}MB`)\n    }\n\n    // Check file name\n    if (!file.name || file.name.trim().length === 0) {\n      errors.push('File name is required')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * Generate storage path for asset\n   */\n  generateStoragePath(\n    userId: string, \n    brandKitId: string, \n    assetType: BrandAssetType, \n    fileName: string\n  ): string {\n    const timestamp = Date.now()\n    const sanitizedFileName = this.sanitizeFileName(fileName)\n    return `${this.config.pathPrefix}/${userId}/brand_assets/${brandKitId}/${assetType}/${timestamp}_${sanitizedFileName}`\n  }\n\n  /**\n   * Sanitize file name for safe storage\n   */\n  private sanitizeFileName(fileName: string): string {\n    return fileName\n      .replace(/[^a-zA-Z0-9.-]/g, '_')\n      .replace(/_+/g, '_')\n      .substring(0, 100)\n  }\n\n  /**\n   * Upload file to storage\n   */\n  async uploadFile(\n    userId: string,\n    brandKitId: string,\n    uploadData: FileUploadData\n  ): Promise<UploadResult> {\n    try {\n      // Validate file\n      const validation = this.validateFile(uploadData.file)\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: {\n            message: validation.errors.join(', '),\n            code: 'VALIDATION_ERROR',\n            details: validation.errors\n          }\n        }\n      }\n\n      // Generate storage path\n      const storagePath = this.generateStoragePath(\n        userId,\n        brandKitId,\n        uploadData.assetType,\n        uploadData.file.name\n      )\n\n      // Upload to storage\n      const { error: uploadError } = await this.storageClient.upload(\n        storagePath,\n        uploadData.file,\n        {\n          cacheControl: this.config.cacheControl,\n          upsert: false\n        }\n      )\n\n      if (uploadError) {\n        return {\n          success: false,\n          error: {\n            message: `File upload failed: ${uploadError.message}`,\n            code: 'UPLOAD_ERROR',\n            details: uploadError\n          }\n        }\n      }\n\n      // Get public URL\n      const { data: { publicUrl } } = this.storageClient.getPublicUrl(storagePath)\n\n      return {\n        success: true,\n        assetUrl: publicUrl,\n        storagePath\n      }\n\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Unknown upload error',\n          code: 'UPLOAD_ERROR',\n          details: error\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete asset from storage\n   */\n  async deleteAsset(storagePath: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await this.storageClient.remove([storagePath])\n      \n      if (error) {\n        return {\n          success: false,\n          error: `Failed to delete asset: ${error.message}`\n        }\n      }\n\n      return { success: true }\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown deletion error'\n      }\n    }\n  }\n\n  /**\n   * Create asset metadata from file\n   */\n  createAssetMetadata(file: File, additionalData?: Partial<AssetMetadata>): AssetMetadata {\n    return {\n      file_name: file.name,\n      file_size: file.size,\n      file_type: file.type,\n      uploaded_at: new Date().toISOString(),\n      tags: [],\n      ...additionalData\n    }\n  }\n\n  /**\n   * Get image dimensions (client-side)\n   */\n  async getImageDimensions(file: File): Promise<{ width: number; height: number } | null> {\n    return new Promise((resolve) => {\n      if (!file.type.startsWith('image/')) {\n        resolve(null)\n        return\n      }\n\n      const img = new Image()\n      const url = URL.createObjectURL(file)\n\n      img.onload = () => {\n        URL.revokeObjectURL(url)\n        resolve({\n          width: img.naturalWidth,\n          height: img.naturalHeight\n        })\n      }\n\n      img.onerror = () => {\n        URL.revokeObjectURL(url)\n        resolve(null)\n      }\n\n      img.src = url\n    })\n  }\n\n  /**\n   * Process file before upload (resize, optimize, etc.)\n   */\n  async processFile(\n    file: File,\n    options?: {\n      maxWidth?: number\n      maxHeight?: number\n      quality?: number\n    }\n  ): Promise<File> {\n    // For now, return the original file\n    // In a full implementation, this would handle image resizing/optimization\n    return file\n  }\n}\n\n/**\n * Asset Serving Utilities\n */\nexport class AssetServingManager {\n  private baseUrl: string\n  private secureProxyPath: string\n\n  constructor(baseUrl: string, secureProxyPath: string = '/api/secure-image') {\n    this.baseUrl = baseUrl\n    this.secureProxyPath = secureProxyPath\n  }\n\n  /**\n   * Generate secure asset URL through proxy\n   */\n  generateSecureUrl(assetUrl: string, options?: {\n    width?: number\n    height?: number\n    quality?: number\n    format?: 'webp' | 'jpeg' | 'png'\n  }): string {\n    const url = new URL(this.secureProxyPath, this.baseUrl)\n    url.searchParams.set('url', assetUrl)\n    \n    if (options) {\n      if (options.width) url.searchParams.set('w', options.width.toString())\n      if (options.height) url.searchParams.set('h', options.height.toString())\n      if (options.quality) url.searchParams.set('q', options.quality.toString())\n      if (options.format) url.searchParams.set('f', options.format)\n    }\n    \n    return url.toString()\n  }\n\n  /**\n   * Generate responsive image set\n   */\n  generateResponsiveImageSet(assetUrl: string): {\n    src: string\n    srcSet: string\n    sizes: string\n  } {\n    const sizes = [320, 640, 768, 1024, 1280, 1920]\n    \n    const srcSet = sizes\n      .map(size => `${this.generateSecureUrl(assetUrl, { width: size })} ${size}w`)\n      .join(', ')\n\n    return {\n      src: this.generateSecureUrl(assetUrl, { width: 1024 }),\n      srcSet,\n      sizes: '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'\n    }\n  }\n\n  /**\n   * Get optimized thumbnail URL\n   */\n  getThumbnailUrl(\n    assetUrl: string, \n    size: 'small' | 'medium' | 'large' = 'medium'\n  ): string {\n    const dimensions = {\n      small: { width: 150, height: 150 },\n      medium: { width: 300, height: 300 },\n      large: { width: 600, height: 600 }\n    }\n\n    return this.generateSecureUrl(assetUrl, {\n      ...dimensions[size],\n      quality: 80,\n      format: 'webp'\n    })\n  }\n}\n\n/**\n * Asset Category Utilities\n */\nexport const AssetCategoryUtils = {\n  /**\n   * Get asset type display name\n   */\n  getDisplayName: (assetType: BrandAssetType): string => {\n    const displayNames: Record<BrandAssetType, string> = {\n      logo: 'Logo',\n      product_photo: 'Product Photo',\n      lifestyle_image: 'Lifestyle Image',\n      icon: 'Icon',\n      banner: 'Banner'\n    }\n    return displayNames[assetType]\n  },\n\n  /**\n   * Get asset type description\n   */\n  getDescription: (assetType: BrandAssetType): string => {\n    const descriptions: Record<BrandAssetType, string> = {\n      logo: 'Brand logos and logotypes',\n      product_photo: 'Product photography and shots',\n      lifestyle_image: 'Lifestyle and brand imagery',\n      icon: 'Icons and small graphics',\n      banner: 'Marketing banners and headers'\n    }\n    return descriptions[assetType]\n  },\n\n  /**\n   * Get recommended dimensions for asset type\n   */\n  getRecommendedDimensions: (assetType: BrandAssetType): { width: number; height: number; aspectRatio: string } => {\n    const dimensions: Record<BrandAssetType, { width: number; height: number; aspectRatio: string }> = {\n      logo: { width: 512, height: 512, aspectRatio: '1:1' },\n      product_photo: { width: 1200, height: 1200, aspectRatio: '1:1' },\n      lifestyle_image: { width: 1920, height: 1080, aspectRatio: '16:9' },\n      icon: { width: 256, height: 256, aspectRatio: '1:1' },\n      banner: { width: 1920, height: 600, aspectRatio: '16:5' }\n    }\n    return dimensions[assetType]\n  },\n\n  /**\n   * Get asset priorities for different use cases\n   */\n  getAssetPriority: (assetType: BrandAssetType): number => {\n    // Lower numbers = higher priority\n    const priorities: Record<BrandAssetType, number> = {\n      logo: 1,\n      product_photo: 2,\n      lifestyle_image: 3,\n      icon: 4,\n      banner: 5\n    }\n    return priorities[assetType]\n  }\n}\n\n/**\n * File validation utilities\n */\nexport const FileValidationUtils = {\n  /**\n   * Check if file is an image\n   */\n  isImage: (file: File): boolean => {\n    return file.type.startsWith('image/')\n  },\n\n  /**\n   * Get file size in human readable format\n   */\n  formatFileSize: (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes'\n    \n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  },\n\n  /**\n   * Validate file extension\n   */\n  validateExtension: (fileName: string, allowedExtensions: string[]): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase()\n    return extension ? allowedExtensions.includes(extension) : false\n  },\n\n  /**\n   * Generate unique filename\n   */\n  generateUniqueFileName: (originalName: string): string => {\n    const timestamp = Date.now()\n    const random = Math.random().toString(36).substring(2, 15)\n    const extension = originalName.split('.').pop()\n    const baseName = originalName.replace(/\\.[^/.]+$/, \"\")\n    \n    return `${baseName}_${timestamp}_${random}.${extension}`\n  }\n} "],"mappings":"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","names":[]}