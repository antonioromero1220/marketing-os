{"version":3,"sources":["../src/index.ts","../src/data.ts","../src/assets.ts","../src/validation.ts"],"sourcesContent":["/**\n * @growthub/brand-kit\n * Brand data coordination and asset management utilities for Growthub Marketing OS\n * \n * This package provides professional brand management patterns extracted from\n * the AT-03 production system, including data coordination, asset management,\n * and validation utilities.\n */\n\n// Re-export all data utilities\nexport * from './data'\nexport type {\n  BrandKitData,\n  BrandKitInsert,\n  BrandKitUpdate,\n  BrandAsset,\n  BrandAssetInsert,\n  BrandContext,\n  BrandDataToolResult,\n  BrandDatabaseClient\n} from './data'\n\n// Re-export all asset utilities  \nexport * from './assets'\nexport type {\n  BrandAssetType,\n  FileUploadData,\n  AssetMetadata,\n  UploadResult,\n  StorageClient,\n  AssetStorageConfig\n} from './assets'\n\n// Re-export all validation utilities\nexport * from './validation'\nexport type {\n  BrandValidationResult,\n  ValidationError,\n  ValidationWarning\n} from './validation'\n\n// Package metadata\nexport const PACKAGE_INFO = {\n  name: '@growthub/brand-kit',\n  version: '1.0.0',\n  description: 'Brand data coordination and asset management utilities for Growthub Marketing OS',\n  patterns: [\n    'Brand Data Management',\n    'Asset Storage Coordination',\n    'Brand Validation & Quality Assessment',\n    'User Isolation & Security',\n    'File Upload & Processing'\n  ],\n  compliance: 'AT-03 PROD STABLE'\n} as const ","/**\n * @growthub/brand-kit/data\n * Brand Data Coordination and Management Utilities\n * \n * Professional brand data patterns extracted from the AT-03 production system.\n * Provides secure brand kit operations with user isolation and validation.\n */\n\nimport { z } from 'zod'\n\n// Re-use existing validation schemas from the main app\nexport const BrandKitInsertSchema = z.object({\n  user_id: z.string().uuid(),\n  brand_name: z.string().min(1, 'Brand name is required').max(100, 'Brand name too long'),\n  colors: z.any().nullable().default(null), // JSON type in database\n  fonts: z.any().nullable().default(null),  // JSON type in database\n  messaging: z.string().nullable().default(null),\n})\n\nexport const BrandKitDataSchema = BrandKitInsertSchema.extend({\n  id: z.string().uuid(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n})\n\nexport const BrandKitUpdateSchema = z.object({\n  brand_name: z.string().min(1).max(100).optional(),\n  colors: z.any().nullable().optional(),\n  fonts: z.any().nullable().optional(),\n  messaging: z.string().nullable().optional(),\n  updated_at: z.string().datetime().optional(),\n})\n\nexport const BrandAssetSchema = z.object({\n  id: z.string().uuid(),\n  brand_kit_id: z.string().uuid(),\n  asset_type: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  asset_url: z.string().url(),\n  storage_path: z.string(),\n  metadata: z.any().nullable().default(null),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n})\n\nexport const BrandAssetInsertSchema = z.object({\n  brand_kit_id: z.string().uuid(),\n  asset_type: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  asset_url: z.string().url(),\n  storage_path: z.string(),\n  metadata: z.any().nullable().default(null),\n})\n\nexport const BrandContextSchema = z.object({\n  brand_name: z.string(),\n  colors: z.array(z.string()).default([]),\n  messaging: z.string().nullable().default(null),\n  referenceImages: z.array(z.object({\n    url: z.string(),\n    type: z.string(),\n    description: z.string()\n  })).default([])\n})\n\nexport const BrandDataToolResultSchema = z.object({\n  success: z.boolean(),\n  message: z.string().optional(),\n  brandKit: z.object({\n    id: z.string(),\n    brandName: z.string(),\n    colors: z.any().optional(),\n    fonts: z.any().optional(), \n    messaging: z.string().nullable().optional(),\n    createdAt: z.string(),\n    updatedAt: z.string(),\n  }).nullable(),\n  assets: z.array(z.object({\n    id: z.string(),\n    assetType: z.string(),\n    assetUrl: z.string(),\n    metadata: z.any().nullable(),\n    createdAt: z.string()\n  })).default([])\n})\n\nexport type BrandKitData = z.infer<typeof BrandKitDataSchema>\nexport type BrandKitInsert = z.infer<typeof BrandKitInsertSchema>\nexport type BrandKitUpdate = z.infer<typeof BrandKitUpdateSchema>\nexport type BrandAsset = z.infer<typeof BrandAssetSchema>\nexport type BrandAssetInsert = z.infer<typeof BrandAssetInsertSchema>\nexport type BrandContext = z.infer<typeof BrandContextSchema>\nexport type BrandDataToolResult = z.infer<typeof BrandDataToolResultSchema>\n\n// Simplified database client interface that matches Supabase\nexport interface BrandDatabaseClient {\n  from(table: string): TableBuilder\n}\n\ninterface TableBuilder {\n  select(columns?: string): SelectQueryBuilder\n  insert(data: any): InsertBuilder\n  update(data: any): UpdateQueryBuilder\n  delete(): DeleteQueryBuilder\n}\n\ninterface SelectQueryBuilder {\n  eq(column: string, value: any): SelectQueryBuilder\n  order(column: string, options?: { ascending: boolean }): SelectQueryBuilder\n  single(): Promise<{ data: any; error: any }>\n  limit(count: number): SelectQueryBuilder\n}\n\ninterface InsertBuilder {\n  select(): { single(): Promise<{ data: any; error: any }> }\n}\n\ninterface UpdateQueryBuilder {\n  eq(column: string, value: any): UpdateQueryBuilder\n  select(): { single(): Promise<{ data: any; error: any }> }\n}\n\ninterface DeleteQueryBuilder {\n  eq(column: string, value: any): DeleteQueryBuilder\n}\n\ninterface DeleteResult {\n  error: any\n}\n\n/**\n * Brand Data Manager Class\n * Provides secure brand kit operations with user isolation\n */\nexport class BrandDataManager {\n  private client: BrandDatabaseClient\n\n  constructor(databaseClient: BrandDatabaseClient) {\n    this.client = databaseClient\n  }\n\n  /**\n   * Get all brand kits for a user with ownership validation\n   */\n  async getBrandKits(userId: string): Promise<BrandKitData[]> {\n    try {\n      const query = this.client\n        .from('brand_kits')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        \n      // Note: This assumes the SelectQueryBuilder implements a promise for non-single queries\n      const result = await (query as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to fetch brand kits: ${result.error.message}`)\n      }\n      \n      return (result?.data || []).map((item: any) => BrandKitDataSchema.parse(item))\n    } catch (error) {\n      console.error('[getBrandKits] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get a specific brand kit by ID with ownership validation\n   */\n  async getBrandKitById(userId: string, brandKitId: string): Promise<BrandKitData | null> {\n    try {\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .select('*')\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        .single()\n      \n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new Error(`Failed to fetch brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[getBrandKitById] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Create a new brand kit with user assignment\n   */\n  async createBrandKit(userId: string, brandData: Omit<BrandKitInsert, 'user_id'>): Promise<BrandKitData> {\n    try {\n      const insertData = BrandKitInsertSchema.parse({\n        ...brandData,\n        user_id: userId\n      })\n\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .insert({\n          ...insertData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to create brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[createBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Update an existing brand kit with ownership validation\n   */\n  async updateBrandKit(userId: string, brandKitId: string, updates: BrandKitUpdate): Promise<BrandKitData> {\n    try {\n      const updateData = BrandKitUpdateSchema.parse({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n\n      const { data, error } = await this.client\n        .from('brand_kits')\n        .update(updateData)\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to update brand kit: ${error.message}`)\n      }\n      \n      return BrandKitDataSchema.parse(data)\n    } catch (error) {\n      console.error('[updateBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Delete a brand kit with ownership validation\n   */\n  async deleteBrandKit(userId: string, brandKitId: string): Promise<boolean> {\n    try {\n      const deleteQuery = this.client\n        .from('brand_kits')\n        .delete()\n        .eq('id', brandKitId)\n        .eq('user_id', userId)\n        \n      // Note: This assumes the DeleteQueryBuilder implements a promise\n      const result = await (deleteQuery as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to delete brand kit: ${result.error.message}`)\n      }\n      \n      return true\n    } catch (error) {\n      console.error('[deleteBrandKit] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get brand assets for a specific brand kit with ownership validation\n   */\n  async getBrandAssets(userId: string, brandKitId: string, assetTypes?: string[]): Promise<BrandAsset[]> {\n    try {\n      // First verify brand kit ownership\n      const brandKit = await this.getBrandKitById(userId, brandKitId)\n      if (!brandKit) {\n        throw new Error('Brand kit not found or access denied')\n      }\n\n      const query = this.client\n        .from('brand_assets')\n        .select('*')\n        .eq('brand_kit_id', brandKitId)\n        \n      // Note: This assumes the SelectQueryBuilder implements a promise for non-single queries\n      const result = await (query as any)\n      \n      if (result?.error) {\n        throw new Error(`Failed to fetch brand assets: ${result.error.message}`)\n      }\n      \n      let assets = (result?.data || []).map((item: any) => BrandAssetSchema.parse(item))\n      \n      // Client-side filtering if assetTypes specified\n      if (assetTypes && assetTypes.length > 0) {\n        assets = assets.filter((asset: BrandAsset) => assetTypes.includes(asset.asset_type))\n      }\n      \n      return assets\n    } catch (error) {\n      console.error('[getBrandAssets] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Create a brand asset with ownership validation\n   */\n  async createBrandAsset(userId: string, assetData: BrandAssetInsert): Promise<BrandAsset> {\n    try {\n      // Verify brand kit ownership\n      const brandKit = await this.getBrandKitById(userId, assetData.brand_kit_id)\n      if (!brandKit) {\n        throw new Error('Brand kit not found or access denied')\n      }\n\n      const insertData = BrandAssetInsertSchema.parse(assetData)\n\n      const { data, error } = await this.client\n        .from('brand_assets')\n        .insert({\n          ...insertData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(`Failed to create brand asset: ${error.message}`)\n      }\n      \n      return BrandAssetSchema.parse(data)\n    } catch (error) {\n      console.error('[createBrandAsset] Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Transform brand kit data to brand context for agent integration\n   */\n  transformToBrandContext(brandKit: BrandKitData | null, assets: BrandAsset[] = []): BrandContext {\n    if (!brandKit) {\n      return {\n        brand_name: 'Your Brand',\n        colors: [],\n        messaging: null,\n        referenceImages: []\n      }\n    }\n\n    return {\n      brand_name: brandKit.brand_name,\n      colors: brandKit.colors ? Object.values(brandKit.colors).filter(Boolean) as string[] : [],\n      messaging: brandKit.messaging,\n      referenceImages: assets.map(asset => ({\n        url: asset.asset_url,\n        type: asset.asset_type,\n        description: asset.metadata?.description || asset.asset_type\n      }))\n    }\n  }\n\n  /**\n   * Transform brand data to tool result format\n   */\n  transformToBrandDataToolResult(brandKit: BrandKitData | null, assets: BrandAsset[] = []): BrandDataToolResult {\n    return {\n      success: true,\n      brandKit: brandKit ? {\n        id: brandKit.id,\n        brandName: brandKit.brand_name,\n        colors: brandKit.colors,\n        fonts: brandKit.fonts,\n        messaging: brandKit.messaging,\n        createdAt: brandKit.created_at,\n        updatedAt: brandKit.updated_at\n      } : null,\n      assets: assets.map(asset => ({\n        id: asset.id,\n        assetType: asset.asset_type,\n        assetUrl: asset.asset_url,\n        metadata: asset.metadata,\n        createdAt: asset.created_at\n      }))\n    }\n  }\n}\n\n/**\n * Default brand kit data for new users\n */\nexport const DEFAULT_BRAND_KIT_DATA: Partial<BrandKitInsert> = {\n  brand_name: 'My New Brand',\n  colors: {\n    primary: '#3B82F6',\n    secondary: '#8B5CF6',\n    accent: '#06B6D4',\n    neutral: '#6B7280'\n  },\n  fonts: {\n    heading: 'Inter',\n    body: 'Inter',\n    accent: 'Roboto'\n  },\n  messaging: null\n}\n\n/**\n * Utility functions for brand data operations\n */\nexport const BrandDataUtils = {\n  /**\n   * Validate brand kit ownership\n   */\n  validateOwnership: (brandKit: BrandKitData, userId: string): boolean => {\n    return brandKit.user_id === userId\n  },\n\n  /**\n   * Generate storage path for brand assets\n   */\n  generateAssetStoragePath: (userId: string, brandKitId: string, assetType: string, fileName: string): string => {\n    const timestamp = Date.now()\n    const sanitizedFileName = fileName\n      .replace(/[^a-zA-Z0-9.-]/g, '_')\n      .replace(/_+/g, '_')\n      .substring(0, 100)\n    return `public/${userId}/brand_assets/${brandKitId}/${assetType}/${timestamp}_${sanitizedFileName}`\n  },\n\n  /**\n   * Extract brand colors as array\n   */\n  extractBrandColors: (brandKit: BrandKitData | null): string[] => {\n    if (!brandKit || !brandKit.colors) return []\n    return Object.values(brandKit.colors).filter(Boolean) as string[]\n  },\n\n  /**\n   * Check if brand kit is complete\n   */\n  isBrandKitComplete: (brandKit: BrandKitData): boolean => {\n    return !!(brandKit.brand_name && brandKit.colors && Object.keys(brandKit.colors).length > 0)\n  },\n\n  /**\n   * Calculate brand strength score\n   */\n  calculateBrandStrength: (brandKit: BrandKitData, assets: BrandAsset[]): 'weak' | 'moderate' | 'strong' | 'excellent' => {\n    let score = 0\n    \n    // Brand name (required)\n    if (brandKit.brand_name && brandKit.brand_name.length > 3) score += 20\n    \n    // Colors\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 2) score += 25\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 4) score += 10\n    \n    // Fonts\n    if (brandKit.fonts && Object.keys(brandKit.fonts).length >= 1) score += 15\n    \n    // Messaging\n    if (brandKit.messaging && brandKit.messaging.length > 20) score += 15\n    \n    // Assets\n    const logoAssets = assets.filter(a => a.asset_type === 'logo')\n    if (logoAssets.length > 0) score += 15\n    if (assets.length > 2) score += 10\n    \n    if (score >= 85) return 'excellent'\n    if (score >= 65) return 'strong'\n    if (score >= 40) return 'moderate'\n    return 'weak'\n  }\n} ","/**\n * @growthub/brand-kit/assets\n * Brand Asset Management and File Operations\n * \n * Professional asset management patterns extracted from the AT-03 production system.\n * Provides secure file upload, storage coordination, and asset serving utilities.\n */\n\nimport { z } from 'zod'\n\n// Asset Type Enum\nexport type BrandAssetType = 'logo' | 'product_photo' | 'lifestyle_image' | 'icon' | 'banner'\n\n// File Upload Schema\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File),\n  assetType: z.enum(['logo', 'product_photo', 'lifestyle_image', 'icon', 'banner']),\n  title: z.string().optional(),\n  description: z.string().optional(),\n})\n\nexport type FileUploadData = z.infer<typeof FileUploadSchema>\n\n// Asset Metadata Schema\nexport const AssetMetadataSchema = z.object({\n  file_name: z.string(),\n  file_size: z.number().int().positive(),\n  file_type: z.string(),\n  uploaded_at: z.string().datetime(),\n  width: z.number().int().positive().optional(),\n  height: z.number().int().positive().optional(),\n  alt_text: z.string().optional(),\n  title: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n})\n\nexport type AssetMetadata = z.infer<typeof AssetMetadataSchema>\n\n// Upload Result Schema\nexport const UploadResultSchema = z.object({\n  success: z.boolean(),\n  assetUrl: z.string().url().optional(),\n  storagePath: z.string().optional(),\n  assetId: z.string().uuid().optional(),\n  error: z.object({\n    message: z.string(),\n    code: z.string(),\n    details: z.any().optional()\n  }).optional()\n})\n\nexport type UploadResult = z.infer<typeof UploadResultSchema>\n\n// Storage Client Interface\nexport interface StorageClient {\n  upload(path: string, file: File, options?: { \n    cacheControl?: string; \n    upsert?: boolean \n  }): Promise<{ error: any }>\n  \n  getPublicUrl(path: string): { \n    data: { publicUrl: string } \n  }\n  \n  remove(paths: string[]): Promise<{ error: any }>\n}\n\n// Asset Storage Configuration\nexport interface AssetStorageConfig {\n  bucket: string\n  pathPrefix: string\n  allowedTypes: string[]\n  maxFileSize: number // in bytes\n  cacheControl: string\n}\n\n/**\n * Brand Asset Manager Class\n * Handles file upload, storage coordination, and asset management\n */\nexport class BrandAssetManager {\n  private storageClient: StorageClient\n  private config: AssetStorageConfig\n\n  constructor(\n    storageClient: StorageClient,\n    config?: Partial<AssetStorageConfig>\n  ) {\n    this.storageClient = storageClient\n    this.config = {\n      bucket: 'node_documents',\n      pathPrefix: 'public',\n      allowedTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/svg+xml'],\n      maxFileSize: 10 * 1024 * 1024, // 10MB\n      cacheControl: '3600',\n      ...config\n    }\n  }\n\n  /**\n   * Validate file before upload\n   */\n  validateFile(file: File): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    // Check file type\n    if (!this.config.allowedTypes.includes(file.type)) {\n      errors.push(`Invalid file type. Allowed types: ${this.config.allowedTypes.join(', ')}`)\n    }\n\n    // Check file size\n    if (file.size > this.config.maxFileSize) {\n      errors.push(`File too large. Maximum size: ${this.config.maxFileSize / (1024 * 1024)}MB`)\n    }\n\n    // Check file name\n    if (!file.name || file.name.trim().length === 0) {\n      errors.push('File name is required')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * Generate storage path for asset\n   */\n  generateStoragePath(\n    userId: string, \n    brandKitId: string, \n    assetType: BrandAssetType, \n    fileName: string\n  ): string {\n    const timestamp = Date.now()\n    const sanitizedFileName = this.sanitizeFileName(fileName)\n    return `${this.config.pathPrefix}/${userId}/brand_assets/${brandKitId}/${assetType}/${timestamp}_${sanitizedFileName}`\n  }\n\n  /**\n   * Sanitize file name for safe storage\n   */\n  private sanitizeFileName(fileName: string): string {\n    return fileName\n      .replace(/[^a-zA-Z0-9.-]/g, '_')\n      .replace(/_+/g, '_')\n      .substring(0, 100)\n  }\n\n  /**\n   * Upload file to storage\n   */\n  async uploadFile(\n    userId: string,\n    brandKitId: string,\n    uploadData: FileUploadData\n  ): Promise<UploadResult> {\n    try {\n      // Validate file\n      const validation = this.validateFile(uploadData.file)\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: {\n            message: validation.errors.join(', '),\n            code: 'VALIDATION_ERROR',\n            details: validation.errors\n          }\n        }\n      }\n\n      // Generate storage path\n      const storagePath = this.generateStoragePath(\n        userId,\n        brandKitId,\n        uploadData.assetType,\n        uploadData.file.name\n      )\n\n      // Upload to storage\n      const { error: uploadError } = await this.storageClient.upload(\n        storagePath,\n        uploadData.file,\n        {\n          cacheControl: this.config.cacheControl,\n          upsert: false\n        }\n      )\n\n      if (uploadError) {\n        return {\n          success: false,\n          error: {\n            message: `File upload failed: ${uploadError.message}`,\n            code: 'UPLOAD_ERROR',\n            details: uploadError\n          }\n        }\n      }\n\n      // Get public URL\n      const { data: { publicUrl } } = this.storageClient.getPublicUrl(storagePath)\n\n      return {\n        success: true,\n        assetUrl: publicUrl,\n        storagePath\n      }\n\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Unknown upload error',\n          code: 'UPLOAD_ERROR',\n          details: error\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete asset from storage\n   */\n  async deleteAsset(storagePath: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await this.storageClient.remove([storagePath])\n      \n      if (error) {\n        return {\n          success: false,\n          error: `Failed to delete asset: ${error.message}`\n        }\n      }\n\n      return { success: true }\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown deletion error'\n      }\n    }\n  }\n\n  /**\n   * Create asset metadata from file\n   */\n  createAssetMetadata(file: File, additionalData?: Partial<AssetMetadata>): AssetMetadata {\n    return {\n      file_name: file.name,\n      file_size: file.size,\n      file_type: file.type,\n      uploaded_at: new Date().toISOString(),\n      tags: [],\n      ...additionalData\n    }\n  }\n\n  /**\n   * Get image dimensions (client-side)\n   */\n  async getImageDimensions(file: File): Promise<{ width: number; height: number } | null> {\n    return new Promise((resolve) => {\n      if (!file.type.startsWith('image/')) {\n        resolve(null)\n        return\n      }\n\n      const img = new Image()\n      const url = URL.createObjectURL(file)\n\n      img.onload = () => {\n        URL.revokeObjectURL(url)\n        resolve({\n          width: img.naturalWidth,\n          height: img.naturalHeight\n        })\n      }\n\n      img.onerror = () => {\n        URL.revokeObjectURL(url)\n        resolve(null)\n      }\n\n      img.src = url\n    })\n  }\n\n  /**\n   * Process file before upload (resize, optimize, etc.)\n   */\n  async processFile(\n    file: File,\n    options?: {\n      maxWidth?: number\n      maxHeight?: number\n      quality?: number\n    }\n  ): Promise<File> {\n    // For now, return the original file\n    // In a full implementation, this would handle image resizing/optimization\n    return file\n  }\n}\n\n/**\n * Asset Serving Utilities\n */\nexport class AssetServingManager {\n  private baseUrl: string\n  private secureProxyPath: string\n\n  constructor(baseUrl: string, secureProxyPath: string = '/api/secure-image') {\n    this.baseUrl = baseUrl\n    this.secureProxyPath = secureProxyPath\n  }\n\n  /**\n   * Generate secure asset URL through proxy\n   */\n  generateSecureUrl(assetUrl: string, options?: {\n    width?: number\n    height?: number\n    quality?: number\n    format?: 'webp' | 'jpeg' | 'png'\n  }): string {\n    const url = new URL(this.secureProxyPath, this.baseUrl)\n    url.searchParams.set('url', assetUrl)\n    \n    if (options) {\n      if (options.width) url.searchParams.set('w', options.width.toString())\n      if (options.height) url.searchParams.set('h', options.height.toString())\n      if (options.quality) url.searchParams.set('q', options.quality.toString())\n      if (options.format) url.searchParams.set('f', options.format)\n    }\n    \n    return url.toString()\n  }\n\n  /**\n   * Generate responsive image set\n   */\n  generateResponsiveImageSet(assetUrl: string): {\n    src: string\n    srcSet: string\n    sizes: string\n  } {\n    const sizes = [320, 640, 768, 1024, 1280, 1920]\n    \n    const srcSet = sizes\n      .map(size => `${this.generateSecureUrl(assetUrl, { width: size })} ${size}w`)\n      .join(', ')\n\n    return {\n      src: this.generateSecureUrl(assetUrl, { width: 1024 }),\n      srcSet,\n      sizes: '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'\n    }\n  }\n\n  /**\n   * Get optimized thumbnail URL\n   */\n  getThumbnailUrl(\n    assetUrl: string, \n    size: 'small' | 'medium' | 'large' = 'medium'\n  ): string {\n    const dimensions = {\n      small: { width: 150, height: 150 },\n      medium: { width: 300, height: 300 },\n      large: { width: 600, height: 600 }\n    }\n\n    return this.generateSecureUrl(assetUrl, {\n      ...dimensions[size],\n      quality: 80,\n      format: 'webp'\n    })\n  }\n}\n\n/**\n * Asset Category Utilities\n */\nexport const AssetCategoryUtils = {\n  /**\n   * Get asset type display name\n   */\n  getDisplayName: (assetType: BrandAssetType): string => {\n    const displayNames: Record<BrandAssetType, string> = {\n      logo: 'Logo',\n      product_photo: 'Product Photo',\n      lifestyle_image: 'Lifestyle Image',\n      icon: 'Icon',\n      banner: 'Banner'\n    }\n    return displayNames[assetType]\n  },\n\n  /**\n   * Get asset type description\n   */\n  getDescription: (assetType: BrandAssetType): string => {\n    const descriptions: Record<BrandAssetType, string> = {\n      logo: 'Brand logos and logotypes',\n      product_photo: 'Product photography and shots',\n      lifestyle_image: 'Lifestyle and brand imagery',\n      icon: 'Icons and small graphics',\n      banner: 'Marketing banners and headers'\n    }\n    return descriptions[assetType]\n  },\n\n  /**\n   * Get recommended dimensions for asset type\n   */\n  getRecommendedDimensions: (assetType: BrandAssetType): { width: number; height: number; aspectRatio: string } => {\n    const dimensions: Record<BrandAssetType, { width: number; height: number; aspectRatio: string }> = {\n      logo: { width: 512, height: 512, aspectRatio: '1:1' },\n      product_photo: { width: 1200, height: 1200, aspectRatio: '1:1' },\n      lifestyle_image: { width: 1920, height: 1080, aspectRatio: '16:9' },\n      icon: { width: 256, height: 256, aspectRatio: '1:1' },\n      banner: { width: 1920, height: 600, aspectRatio: '16:5' }\n    }\n    return dimensions[assetType]\n  },\n\n  /**\n   * Get asset priorities for different use cases\n   */\n  getAssetPriority: (assetType: BrandAssetType): number => {\n    // Lower numbers = higher priority\n    const priorities: Record<BrandAssetType, number> = {\n      logo: 1,\n      product_photo: 2,\n      lifestyle_image: 3,\n      icon: 4,\n      banner: 5\n    }\n    return priorities[assetType]\n  }\n}\n\n/**\n * File validation utilities\n */\nexport const FileValidationUtils = {\n  /**\n   * Check if file is an image\n   */\n  isImage: (file: File): boolean => {\n    return file.type.startsWith('image/')\n  },\n\n  /**\n   * Get file size in human readable format\n   */\n  formatFileSize: (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes'\n    \n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  },\n\n  /**\n   * Validate file extension\n   */\n  validateExtension: (fileName: string, allowedExtensions: string[]): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase()\n    return extension ? allowedExtensions.includes(extension) : false\n  },\n\n  /**\n   * Generate unique filename\n   */\n  generateUniqueFileName: (originalName: string): string => {\n    const timestamp = Date.now()\n    const random = Math.random().toString(36).substring(2, 15)\n    const extension = originalName.split('.').pop()\n    const baseName = originalName.replace(/\\.[^/.]+$/, \"\")\n    \n    return `${baseName}_${timestamp}_${random}.${extension}`\n  }\n} ","/**\n * @growthub/brand-kit/validation\n * Brand Data Validation and Quality Assessment\n * \n * Professional validation patterns extracted from the AT-03 production system.\n * Provides comprehensive brand data validation with quality scoring and recommendations.\n */\n\nimport { z } from 'zod'\nimport type { BrandKitData, BrandAsset, BrandContext } from './data'\n\n// Brand Validation Result\nexport interface BrandValidationResult {\n  valid: boolean\n  score: number // 0-100\n  strength: 'weak' | 'moderate' | 'strong' | 'excellent'\n  errors: ValidationError[]\n  warnings: ValidationWarning[]\n  recommendations: string[]\n  completeness: {\n    name: boolean\n    colors: boolean\n    fonts: boolean\n    messaging: boolean\n    assets: boolean\n  }\n}\n\n// Validation Error\nexport interface ValidationError {\n  field: string\n  message: string\n  code: string\n  severity: 'error' | 'warning' | 'info'\n}\n\n// Validation Warning\nexport interface ValidationWarning {\n  field: string\n  message: string\n  suggestion: string\n}\n\n// Color Validation Schema\nexport const ColorValidationSchema = z.object({\n  primary: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format'),\n  secondary: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional(),\n  accent: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional(),\n  neutral: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional()\n})\n\n// Font Validation Schema\nexport const FontValidationSchema = z.object({\n  heading: z.string().min(1, 'Heading font is required').optional(),\n  body: z.string().min(1, 'Body font is required').optional(),\n  accent: z.string().min(1, 'Accent font name is required').optional()\n})\n\n/**\n * Brand Kit Validator Class\n * Comprehensive validation for brand kits with quality assessment\n */\nexport class BrandKitValidator {\n  \n  /**\n   * Validate complete brand kit\n   */\n  validateBrandKit(brandKit: BrandKitData, assets: BrandAsset[] = []): BrandValidationResult {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n    \n    let score = 0\n    const completeness = {\n      name: false,\n      colors: false,\n      fonts: false,\n      messaging: false,\n      assets: false\n    }\n\n    // Validate brand name\n    const nameResult = this.validateBrandName(brandKit.brand_name)\n    if (nameResult.valid) {\n      score += 20\n      completeness.name = true\n    } else {\n      errors.push(...nameResult.errors)\n    }\n    warnings.push(...nameResult.warnings)\n    recommendations.push(...nameResult.recommendations)\n\n    // Validate colors\n    const colorsResult = this.validateBrandColors(brandKit.colors)\n    if (colorsResult.valid) {\n      score += 25\n      completeness.colors = true\n    } else {\n      errors.push(...colorsResult.errors)\n    }\n    warnings.push(...colorsResult.warnings)\n    recommendations.push(...colorsResult.recommendations)\n\n    // Validate fonts\n    const fontsResult = this.validateBrandFonts(brandKit.fonts)\n    if (fontsResult.valid) {\n      score += 15\n      completeness.fonts = true\n    } else {\n      errors.push(...fontsResult.errors)\n    }\n    warnings.push(...fontsResult.warnings)\n    recommendations.push(...fontsResult.recommendations)\n\n    // Validate messaging\n    const messagingResult = this.validateBrandMessaging(brandKit.messaging)\n    if (messagingResult.valid) {\n      score += 20\n      completeness.messaging = true\n    } else {\n      errors.push(...messagingResult.errors)\n    }\n    warnings.push(...messagingResult.warnings)\n    recommendations.push(...messagingResult.recommendations)\n\n    // Validate assets\n    const assetsResult = this.validateBrandAssets(assets)\n    if (assetsResult.valid) {\n      score += 20\n      completeness.assets = true\n    } else {\n      errors.push(...assetsResult.errors)\n    }\n    warnings.push(...assetsResult.warnings)\n    recommendations.push(...assetsResult.recommendations)\n\n    // Determine overall strength\n    const strength = this.calculateBrandStrength(score)\n\n    return {\n      valid: errors.length === 0,\n      score,\n      strength,\n      errors,\n      warnings,\n      recommendations,\n      completeness\n    }\n  }\n\n  /**\n   * Validate brand name\n   */\n  validateBrandName(brandName: string): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    // Required validation\n    if (!brandName || brandName.trim().length === 0) {\n      errors.push({\n        field: 'brand_name',\n        message: 'Brand name is required',\n        code: 'BRAND_NAME_REQUIRED',\n        severity: 'error'\n      })\n      return { valid: false, errors, warnings, recommendations }\n    }\n\n    // Length validation\n    if (brandName.length < 2) {\n      errors.push({\n        field: 'brand_name',\n        message: 'Brand name must be at least 2 characters',\n        code: 'BRAND_NAME_TOO_SHORT',\n        severity: 'error'\n      })\n    }\n\n    if (brandName.length > 50) {\n      warnings.push({\n        field: 'brand_name',\n        message: 'Brand name is very long',\n        suggestion: 'Consider a shorter, more memorable name'\n      })\n    }\n\n    // Character validation\n    if (/^\\s|\\s$/.test(brandName)) {\n      warnings.push({\n        field: 'brand_name',\n        message: 'Brand name has leading or trailing spaces',\n        suggestion: 'Remove extra whitespace'\n      })\n    }\n\n    // Quality recommendations\n    if (brandName.toLowerCase() === brandName) {\n      recommendations.push('Consider proper capitalization for your brand name')\n    }\n\n    if (brandName.includes('test') || brandName.includes('demo') || brandName.includes('sample')) {\n      recommendations.push('Replace placeholder text with your actual brand name')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand colors\n   */\n  validateBrandColors(colors: Record<string, string> | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!colors || Object.keys(colors).length === 0) {\n      errors.push({\n        field: 'colors',\n        message: 'At least one brand color is required',\n        code: 'COLORS_REQUIRED',\n        severity: 'error'\n      })\n      recommendations.push('Add a primary color to establish your brand identity')\n      return { valid: false, errors, warnings, recommendations }\n    }\n\n    // Validate primary color (most important)\n    if (!colors.primary) {\n      errors.push({\n        field: 'colors.primary',\n        message: 'Primary color is required',\n        code: 'PRIMARY_COLOR_REQUIRED',\n        severity: 'error'\n      })\n    } else if (!this.isValidHexColor(colors.primary)) {\n      errors.push({\n        field: 'colors.primary',\n        message: 'Primary color must be a valid hex color',\n        code: 'INVALID_COLOR_FORMAT',\n        severity: 'error'\n      })\n    }\n\n    // Validate other colors\n    Object.entries(colors).forEach(([key, value]) => {\n      if (value && !this.isValidHexColor(value)) {\n        errors.push({\n          field: `colors.${key}`,\n          message: `${key} color must be a valid hex color`,\n          code: 'INVALID_COLOR_FORMAT',\n          severity: 'error'\n        })\n      }\n    })\n\n    // Quality checks\n    const colorValues = Object.values(colors).filter(Boolean)\n    if (colorValues.length === 1) {\n      recommendations.push('Add secondary colors to create a more complete brand palette')\n    }\n\n    // Check for contrast issues\n    if (colors.primary && colors.secondary) {\n      const contrast = this.calculateColorContrast(colors.primary, colors.secondary)\n      if (contrast < 2.0) {\n        warnings.push({\n          field: 'colors',\n          message: 'Primary and secondary colors may have low contrast',\n          suggestion: 'Consider adjusting colors for better contrast'\n        })\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand fonts\n   */\n  validateBrandFonts(fonts: Record<string, string> | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!fonts || Object.keys(fonts).length === 0) {\n      recommendations.push('Add font selections to strengthen your brand identity')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Validate font entries\n    Object.entries(fonts).forEach(([key, value]) => {\n      if (!value || value.trim().length === 0) {\n        warnings.push({\n          field: `fonts.${key}`,\n          message: `${key} font is empty`,\n          suggestion: `Select a ${key} font or remove this entry`\n        })\n      }\n    })\n\n    // Recommendations\n    if (!fonts.heading || !fonts.body) {\n      recommendations.push('Consider defining both heading and body fonts')\n    }\n\n    const fontValues = Object.values(fonts).filter(Boolean)\n    if (new Set(fontValues).size === 1 && fontValues.length > 1) {\n      recommendations.push('Using different fonts for headings and body can improve visual hierarchy')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand messaging\n   */\n  validateBrandMessaging(messaging: string | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!messaging || messaging.trim().length === 0) {\n      recommendations.push('Add brand messaging to communicate your value proposition')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Length validation\n    if (messaging.length < 10) {\n      warnings.push({\n        field: 'messaging',\n        message: 'Brand messaging is very short',\n        suggestion: 'Expand your messaging to better communicate your brand values'\n      })\n    }\n\n    if (messaging.length > 500) {\n      warnings.push({\n        field: 'messaging',\n        message: 'Brand messaging is very long',\n        suggestion: 'Consider condensing to key points for better impact'\n      })\n    }\n\n    // Quality checks\n    if (messaging.toLowerCase().includes('lorem ipsum') || messaging.includes('placeholder')) {\n      recommendations.push('Replace placeholder text with your actual brand messaging')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand assets\n   */\n  validateBrandAssets(assets: BrandAsset[]): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!assets || assets.length === 0) {\n      recommendations.push('Upload brand assets like logos and product images')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Check for logo\n    const logoAssets = assets.filter(asset => asset.asset_type === 'logo')\n    if (logoAssets.length === 0) {\n      recommendations.push('Upload a logo to strengthen your brand presence')\n    }\n\n    // Check asset diversity\n    const assetTypes = new Set(assets.map(asset => asset.asset_type))\n    if (assetTypes.size === 1 && assets.length > 1) {\n      recommendations.push('Consider diversifying your asset types for more versatile branding')\n    }\n\n    // Validate individual assets\n    assets.forEach((asset, index) => {\n      if (!asset.asset_url || !this.isValidUrl(asset.asset_url)) {\n        errors.push({\n          field: `assets[${index}].asset_url`,\n          message: 'Invalid asset URL',\n          code: 'INVALID_ASSET_URL',\n          severity: 'error'\n        })\n      }\n    })\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand context for agent integration\n   */\n  validateBrandContext(context: BrandContext): BrandValidationResult {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    let score = 0\n    const completeness = {\n      name: false,\n      colors: false,\n      fonts: false,\n      messaging: false,\n      assets: false\n    }\n\n    // Brand name\n    if (context.brand_name && context.brand_name !== 'Your Brand') {\n      score += 30\n      completeness.name = true\n    } else {\n      recommendations.push('Set a specific brand name')\n    }\n\n    // Colors\n    if (context.colors && context.colors.length > 0) {\n      score += 25\n      completeness.colors = true\n    } else {\n      recommendations.push('Define brand colors')\n    }\n\n    // Messaging\n    if (context.messaging && context.messaging.length > 10) {\n      score += 25\n      completeness.messaging = true\n    } else {\n      recommendations.push('Add brand messaging')\n    }\n\n    // Reference images\n    if (context.referenceImages && context.referenceImages.length > 0) {\n      score += 20\n      completeness.assets = true\n    } else {\n      recommendations.push('Upload reference images')\n    }\n\n    const strength = this.calculateBrandStrength(score)\n\n    return {\n      valid: errors.length === 0,\n      score,\n      strength,\n      errors,\n      warnings,\n      recommendations,\n      completeness\n    }\n  }\n\n  /**\n   * Helper: Validate hex color format\n   */\n  private isValidHexColor(color: string): boolean {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color)\n  }\n\n  /**\n   * Helper: Validate URL format\n   */\n  private isValidUrl(url: string): boolean {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Helper: Calculate color contrast ratio\n   */\n  private calculateColorContrast(color1: string, color2: string): number {\n    // Simplified contrast calculation\n    // In a real implementation, this would use proper color space calculations\n    const luminance1 = this.getColorLuminance(color1)\n    const luminance2 = this.getColorLuminance(color2)\n    \n    const lighter = Math.max(luminance1, luminance2)\n    const darker = Math.min(luminance1, luminance2)\n    \n    return (lighter + 0.05) / (darker + 0.05)\n  }\n\n  /**\n   * Helper: Get relative luminance of color\n   */\n  private getColorLuminance(hexColor: string): number {\n    // Simplified luminance calculation\n    const hex = hexColor.replace('#', '')\n    const r = parseInt(hex.substr(0, 2), 16) / 255\n    const g = parseInt(hex.substr(2, 2), 16) / 255  \n    const b = parseInt(hex.substr(4, 2), 16) / 255\n    \n    return 0.2126 * r + 0.7152 * g + 0.0722 * b\n  }\n\n  /**\n   * Helper: Calculate brand strength from score\n   */\n  private calculateBrandStrength(score: number): 'weak' | 'moderate' | 'strong' | 'excellent' {\n    if (score >= 85) return 'excellent'\n    if (score >= 65) return 'strong'\n    if (score >= 40) return 'moderate'\n    return 'weak'\n  }\n}\n\n/**\n * Brand Quality Analyzer\n * Advanced quality assessment and improvement suggestions\n */\nexport class BrandQualityAnalyzer {\n  \n  /**\n   * Analyze brand completeness\n   */\n  analyzeCompleteness(brandKit: BrandKitData, assets: BrandAsset[]): {\n    score: number\n    missingElements: string[]\n    recommendations: string[]\n  } {\n    const missingElements: string[] = []\n    const recommendations: string[] = []\n    \n    let score = 0\n    const maxScore = 100\n\n    // Brand name (20 points)\n    if (brandKit.brand_name && brandKit.brand_name.length > 2) {\n      score += 20\n    } else {\n      missingElements.push('Brand Name')\n      recommendations.push('Set a distinctive brand name')\n    }\n\n    // Colors (25 points)\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 2) {\n      score += 25\n    } else {\n      missingElements.push('Brand Colors')\n      recommendations.push('Define a primary and secondary color')\n    }\n\n    // Fonts (15 points)\n    if (brandKit.fonts && Object.keys(brandKit.fonts).length >= 1) {\n      score += 15\n    } else {\n      missingElements.push('Brand Fonts')\n      recommendations.push('Choose fonts for your brand typography')\n    }\n\n    // Messaging (20 points)\n    if (brandKit.messaging && brandKit.messaging.length > 20) {\n      score += 20\n    } else {\n      missingElements.push('Brand Messaging')\n      recommendations.push('Write a compelling brand message')\n    }\n\n    // Assets (20 points)\n    if (assets.length > 0) {\n      score += 15\n      // Bonus for logo\n      if (assets.some(a => a.asset_type === 'logo')) {\n        score += 5\n      }\n    } else {\n      missingElements.push('Brand Assets')\n      recommendations.push('Upload brand assets like logos and images')\n    }\n\n    return {\n      score: Math.round((score / maxScore) * 100),\n      missingElements,\n      recommendations\n    }\n  }\n\n  /**\n   * Analyze brand consistency\n   */\n  analyzeConsistency(brandKit: BrandKitData): {\n    score: number\n    issues: string[]\n    suggestions: string[]\n  } {\n    const issues: string[] = []\n    const suggestions: string[] = []\n    let score = 100\n\n    // Check color harmony\n    if (brandKit.colors && Object.keys(brandKit.colors).length > 1) {\n      const colors = Object.values(brandKit.colors).filter(Boolean) as string[]\n      // Simplified check - in reality would analyze color harmony\n      if (colors.length > 4) {\n        issues.push('Too many colors may reduce brand focus')\n        suggestions.push('Consider limiting to 3-4 core brand colors')\n        score -= 10\n      }\n    }\n\n    // Check naming consistency\n    if (brandKit.brand_name) {\n      if (brandKit.brand_name.includes('  ')) {\n        issues.push('Brand name has inconsistent spacing')\n        suggestions.push('Clean up spacing in brand name')\n        score -= 5\n      }\n    }\n\n    return {\n      score: Math.max(0, score),\n      issues,\n      suggestions\n    }\n  }\n}\n\n/**\n * Validation utilities\n */\nexport const ValidationUtils = {\n  /**\n   * Create validation summary\n   */\n  createValidationSummary(result: BrandValidationResult): string {\n    const parts: string[] = []\n    \n    parts.push(`Brand Strength: ${result.strength.toUpperCase()} (${result.score}/100)`)\n    \n    if (result.errors.length > 0) {\n      parts.push(`Errors: ${result.errors.length}`)\n    }\n    \n    if (result.warnings.length > 0) {\n      parts.push(`Warnings: ${result.warnings.length}`)\n    }\n    \n    if (result.recommendations.length > 0) {\n      parts.push(`Recommendations: ${result.recommendations.length}`)\n    }\n    \n    return parts.join(' | ')\n  },\n\n  /**\n   * Get next action recommendation\n   */\n  getNextActionRecommendation(result: BrandValidationResult): string {\n    if (result.errors.length > 0) {\n      return `Fix ${result.errors.length} error${result.errors.length > 1 ? 's' : ''} to improve your brand`\n    }\n    \n    if (!result.completeness.name) {\n      return 'Set your brand name to get started'\n    }\n    \n    if (!result.completeness.colors) {\n      return 'Add brand colors to establish visual identity'\n    }\n    \n    if (!result.completeness.assets) {\n      return 'Upload a logo to complete your brand kit'\n    }\n    \n    if (!result.completeness.messaging) {\n      return 'Add brand messaging to communicate your value'\n    }\n    \n    return 'Your brand kit is looking great! Consider fine-tuning details'\n  },\n\n  /**\n   * Filter validation results by severity\n   */\n  filterBySeverity(\n    errors: ValidationError[], \n    severity: ValidationError['severity']\n  ): ValidationError[] {\n    return errors.filter(error => error.severity === severity)\n  }\n} "],"mappings":"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","names":["import_zod","import_zod"]}