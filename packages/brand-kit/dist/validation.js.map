{"version":3,"sources":["../src/validation.ts"],"sourcesContent":["/**\n * @growthub/brand-kit/validation\n * Brand Data Validation and Quality Assessment\n * \n * Professional validation patterns extracted from the AT-03 production system.\n * Provides comprehensive brand data validation with quality scoring and recommendations.\n */\n\nimport { z } from 'zod'\nimport type { BrandKitData, BrandAsset, BrandContext } from './data'\n\n// Brand Validation Result\nexport interface BrandValidationResult {\n  valid: boolean\n  score: number // 0-100\n  strength: 'weak' | 'moderate' | 'strong' | 'excellent'\n  errors: ValidationError[]\n  warnings: ValidationWarning[]\n  recommendations: string[]\n  completeness: {\n    name: boolean\n    colors: boolean\n    fonts: boolean\n    messaging: boolean\n    assets: boolean\n  }\n}\n\n// Validation Error\nexport interface ValidationError {\n  field: string\n  message: string\n  code: string\n  severity: 'error' | 'warning' | 'info'\n}\n\n// Validation Warning\nexport interface ValidationWarning {\n  field: string\n  message: string\n  suggestion: string\n}\n\n// Color Validation Schema\nexport const ColorValidationSchema = z.object({\n  primary: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format'),\n  secondary: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional(),\n  accent: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional(),\n  neutral: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format').optional()\n})\n\n// Font Validation Schema\nexport const FontValidationSchema = z.object({\n  heading: z.string().min(1, 'Heading font is required').optional(),\n  body: z.string().min(1, 'Body font is required').optional(),\n  accent: z.string().min(1, 'Accent font name is required').optional()\n})\n\n/**\n * Brand Kit Validator Class\n * Comprehensive validation for brand kits with quality assessment\n */\nexport class BrandKitValidator {\n  \n  /**\n   * Validate complete brand kit\n   */\n  validateBrandKit(brandKit: BrandKitData, assets: BrandAsset[] = []): BrandValidationResult {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n    \n    let score = 0\n    const completeness = {\n      name: false,\n      colors: false,\n      fonts: false,\n      messaging: false,\n      assets: false\n    }\n\n    // Validate brand name\n    const nameResult = this.validateBrandName(brandKit.brand_name)\n    if (nameResult.valid) {\n      score += 20\n      completeness.name = true\n    } else {\n      errors.push(...nameResult.errors)\n    }\n    warnings.push(...nameResult.warnings)\n    recommendations.push(...nameResult.recommendations)\n\n    // Validate colors\n    const colorsResult = this.validateBrandColors(brandKit.colors)\n    if (colorsResult.valid) {\n      score += 25\n      completeness.colors = true\n    } else {\n      errors.push(...colorsResult.errors)\n    }\n    warnings.push(...colorsResult.warnings)\n    recommendations.push(...colorsResult.recommendations)\n\n    // Validate fonts\n    const fontsResult = this.validateBrandFonts(brandKit.fonts)\n    if (fontsResult.valid) {\n      score += 15\n      completeness.fonts = true\n    } else {\n      errors.push(...fontsResult.errors)\n    }\n    warnings.push(...fontsResult.warnings)\n    recommendations.push(...fontsResult.recommendations)\n\n    // Validate messaging\n    const messagingResult = this.validateBrandMessaging(brandKit.messaging)\n    if (messagingResult.valid) {\n      score += 20\n      completeness.messaging = true\n    } else {\n      errors.push(...messagingResult.errors)\n    }\n    warnings.push(...messagingResult.warnings)\n    recommendations.push(...messagingResult.recommendations)\n\n    // Validate assets\n    const assetsResult = this.validateBrandAssets(assets)\n    if (assetsResult.valid) {\n      score += 20\n      completeness.assets = true\n    } else {\n      errors.push(...assetsResult.errors)\n    }\n    warnings.push(...assetsResult.warnings)\n    recommendations.push(...assetsResult.recommendations)\n\n    // Determine overall strength\n    const strength = this.calculateBrandStrength(score)\n\n    return {\n      valid: errors.length === 0,\n      score,\n      strength,\n      errors,\n      warnings,\n      recommendations,\n      completeness\n    }\n  }\n\n  /**\n   * Validate brand name\n   */\n  validateBrandName(brandName: string): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    // Required validation\n    if (!brandName || brandName.trim().length === 0) {\n      errors.push({\n        field: 'brand_name',\n        message: 'Brand name is required',\n        code: 'BRAND_NAME_REQUIRED',\n        severity: 'error'\n      })\n      return { valid: false, errors, warnings, recommendations }\n    }\n\n    // Length validation\n    if (brandName.length < 2) {\n      errors.push({\n        field: 'brand_name',\n        message: 'Brand name must be at least 2 characters',\n        code: 'BRAND_NAME_TOO_SHORT',\n        severity: 'error'\n      })\n    }\n\n    if (brandName.length > 50) {\n      warnings.push({\n        field: 'brand_name',\n        message: 'Brand name is very long',\n        suggestion: 'Consider a shorter, more memorable name'\n      })\n    }\n\n    // Character validation\n    if (/^\\s|\\s$/.test(brandName)) {\n      warnings.push({\n        field: 'brand_name',\n        message: 'Brand name has leading or trailing spaces',\n        suggestion: 'Remove extra whitespace'\n      })\n    }\n\n    // Quality recommendations\n    if (brandName.toLowerCase() === brandName) {\n      recommendations.push('Consider proper capitalization for your brand name')\n    }\n\n    if (brandName.includes('test') || brandName.includes('demo') || brandName.includes('sample')) {\n      recommendations.push('Replace placeholder text with your actual brand name')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand colors\n   */\n  validateBrandColors(colors: Record<string, string> | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!colors || Object.keys(colors).length === 0) {\n      errors.push({\n        field: 'colors',\n        message: 'At least one brand color is required',\n        code: 'COLORS_REQUIRED',\n        severity: 'error'\n      })\n      recommendations.push('Add a primary color to establish your brand identity')\n      return { valid: false, errors, warnings, recommendations }\n    }\n\n    // Validate primary color (most important)\n    if (!colors.primary) {\n      errors.push({\n        field: 'colors.primary',\n        message: 'Primary color is required',\n        code: 'PRIMARY_COLOR_REQUIRED',\n        severity: 'error'\n      })\n    } else if (!this.isValidHexColor(colors.primary)) {\n      errors.push({\n        field: 'colors.primary',\n        message: 'Primary color must be a valid hex color',\n        code: 'INVALID_COLOR_FORMAT',\n        severity: 'error'\n      })\n    }\n\n    // Validate other colors\n    Object.entries(colors).forEach(([key, value]) => {\n      if (value && !this.isValidHexColor(value)) {\n        errors.push({\n          field: `colors.${key}`,\n          message: `${key} color must be a valid hex color`,\n          code: 'INVALID_COLOR_FORMAT',\n          severity: 'error'\n        })\n      }\n    })\n\n    // Quality checks\n    const colorValues = Object.values(colors).filter(Boolean)\n    if (colorValues.length === 1) {\n      recommendations.push('Add secondary colors to create a more complete brand palette')\n    }\n\n    // Check for contrast issues\n    if (colors.primary && colors.secondary) {\n      const contrast = this.calculateColorContrast(colors.primary, colors.secondary)\n      if (contrast < 2.0) {\n        warnings.push({\n          field: 'colors',\n          message: 'Primary and secondary colors may have low contrast',\n          suggestion: 'Consider adjusting colors for better contrast'\n        })\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand fonts\n   */\n  validateBrandFonts(fonts: Record<string, string> | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!fonts || Object.keys(fonts).length === 0) {\n      recommendations.push('Add font selections to strengthen your brand identity')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Validate font entries\n    Object.entries(fonts).forEach(([key, value]) => {\n      if (!value || value.trim().length === 0) {\n        warnings.push({\n          field: `fonts.${key}`,\n          message: `${key} font is empty`,\n          suggestion: `Select a ${key} font or remove this entry`\n        })\n      }\n    })\n\n    // Recommendations\n    if (!fonts.heading || !fonts.body) {\n      recommendations.push('Consider defining both heading and body fonts')\n    }\n\n    const fontValues = Object.values(fonts).filter(Boolean)\n    if (new Set(fontValues).size === 1 && fontValues.length > 1) {\n      recommendations.push('Using different fonts for headings and body can improve visual hierarchy')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand messaging\n   */\n  validateBrandMessaging(messaging: string | null): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!messaging || messaging.trim().length === 0) {\n      recommendations.push('Add brand messaging to communicate your value proposition')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Length validation\n    if (messaging.length < 10) {\n      warnings.push({\n        field: 'messaging',\n        message: 'Brand messaging is very short',\n        suggestion: 'Expand your messaging to better communicate your brand values'\n      })\n    }\n\n    if (messaging.length > 500) {\n      warnings.push({\n        field: 'messaging',\n        message: 'Brand messaging is very long',\n        suggestion: 'Consider condensing to key points for better impact'\n      })\n    }\n\n    // Quality checks\n    if (messaging.toLowerCase().includes('lorem ipsum') || messaging.includes('placeholder')) {\n      recommendations.push('Replace placeholder text with your actual brand messaging')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand assets\n   */\n  validateBrandAssets(assets: BrandAsset[]): {\n    valid: boolean\n    errors: ValidationError[]\n    warnings: ValidationWarning[]\n    recommendations: string[]\n  } {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    if (!assets || assets.length === 0) {\n      recommendations.push('Upload brand assets like logos and product images')\n      return { valid: true, errors, warnings, recommendations }\n    }\n\n    // Check for logo\n    const logoAssets = assets.filter(asset => asset.asset_type === 'logo')\n    if (logoAssets.length === 0) {\n      recommendations.push('Upload a logo to strengthen your brand presence')\n    }\n\n    // Check asset diversity\n    const assetTypes = new Set(assets.map(asset => asset.asset_type))\n    if (assetTypes.size === 1 && assets.length > 1) {\n      recommendations.push('Consider diversifying your asset types for more versatile branding')\n    }\n\n    // Validate individual assets\n    assets.forEach((asset, index) => {\n      if (!asset.asset_url || !this.isValidUrl(asset.asset_url)) {\n        errors.push({\n          field: `assets[${index}].asset_url`,\n          message: 'Invalid asset URL',\n          code: 'INVALID_ASSET_URL',\n          severity: 'error'\n        })\n      }\n    })\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      recommendations\n    }\n  }\n\n  /**\n   * Validate brand context for agent integration\n   */\n  validateBrandContext(context: BrandContext): BrandValidationResult {\n    const errors: ValidationError[] = []\n    const warnings: ValidationWarning[] = []\n    const recommendations: string[] = []\n\n    let score = 0\n    const completeness = {\n      name: false,\n      colors: false,\n      fonts: false,\n      messaging: false,\n      assets: false\n    }\n\n    // Brand name\n    if (context.brand_name && context.brand_name !== 'Your Brand') {\n      score += 30\n      completeness.name = true\n    } else {\n      recommendations.push('Set a specific brand name')\n    }\n\n    // Colors\n    if (context.colors && context.colors.length > 0) {\n      score += 25\n      completeness.colors = true\n    } else {\n      recommendations.push('Define brand colors')\n    }\n\n    // Messaging\n    if (context.messaging && context.messaging.length > 10) {\n      score += 25\n      completeness.messaging = true\n    } else {\n      recommendations.push('Add brand messaging')\n    }\n\n    // Reference images\n    if (context.referenceImages && context.referenceImages.length > 0) {\n      score += 20\n      completeness.assets = true\n    } else {\n      recommendations.push('Upload reference images')\n    }\n\n    const strength = this.calculateBrandStrength(score)\n\n    return {\n      valid: errors.length === 0,\n      score,\n      strength,\n      errors,\n      warnings,\n      recommendations,\n      completeness\n    }\n  }\n\n  /**\n   * Helper: Validate hex color format\n   */\n  private isValidHexColor(color: string): boolean {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color)\n  }\n\n  /**\n   * Helper: Validate URL format\n   */\n  private isValidUrl(url: string): boolean {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Helper: Calculate color contrast ratio\n   */\n  private calculateColorContrast(color1: string, color2: string): number {\n    // Simplified contrast calculation\n    // In a real implementation, this would use proper color space calculations\n    const luminance1 = this.getColorLuminance(color1)\n    const luminance2 = this.getColorLuminance(color2)\n    \n    const lighter = Math.max(luminance1, luminance2)\n    const darker = Math.min(luminance1, luminance2)\n    \n    return (lighter + 0.05) / (darker + 0.05)\n  }\n\n  /**\n   * Helper: Get relative luminance of color\n   */\n  private getColorLuminance(hexColor: string): number {\n    // Simplified luminance calculation\n    const hex = hexColor.replace('#', '')\n    const r = parseInt(hex.substr(0, 2), 16) / 255\n    const g = parseInt(hex.substr(2, 2), 16) / 255  \n    const b = parseInt(hex.substr(4, 2), 16) / 255\n    \n    return 0.2126 * r + 0.7152 * g + 0.0722 * b\n  }\n\n  /**\n   * Helper: Calculate brand strength from score\n   */\n  private calculateBrandStrength(score: number): 'weak' | 'moderate' | 'strong' | 'excellent' {\n    if (score >= 85) return 'excellent'\n    if (score >= 65) return 'strong'\n    if (score >= 40) return 'moderate'\n    return 'weak'\n  }\n}\n\n/**\n * Brand Quality Analyzer\n * Advanced quality assessment and improvement suggestions\n */\nexport class BrandQualityAnalyzer {\n  \n  /**\n   * Analyze brand completeness\n   */\n  analyzeCompleteness(brandKit: BrandKitData, assets: BrandAsset[]): {\n    score: number\n    missingElements: string[]\n    recommendations: string[]\n  } {\n    const missingElements: string[] = []\n    const recommendations: string[] = []\n    \n    let score = 0\n    const maxScore = 100\n\n    // Brand name (20 points)\n    if (brandKit.brand_name && brandKit.brand_name.length > 2) {\n      score += 20\n    } else {\n      missingElements.push('Brand Name')\n      recommendations.push('Set a distinctive brand name')\n    }\n\n    // Colors (25 points)\n    if (brandKit.colors && Object.keys(brandKit.colors).length >= 2) {\n      score += 25\n    } else {\n      missingElements.push('Brand Colors')\n      recommendations.push('Define a primary and secondary color')\n    }\n\n    // Fonts (15 points)\n    if (brandKit.fonts && Object.keys(brandKit.fonts).length >= 1) {\n      score += 15\n    } else {\n      missingElements.push('Brand Fonts')\n      recommendations.push('Choose fonts for your brand typography')\n    }\n\n    // Messaging (20 points)\n    if (brandKit.messaging && brandKit.messaging.length > 20) {\n      score += 20\n    } else {\n      missingElements.push('Brand Messaging')\n      recommendations.push('Write a compelling brand message')\n    }\n\n    // Assets (20 points)\n    if (assets.length > 0) {\n      score += 15\n      // Bonus for logo\n      if (assets.some(a => a.asset_type === 'logo')) {\n        score += 5\n      }\n    } else {\n      missingElements.push('Brand Assets')\n      recommendations.push('Upload brand assets like logos and images')\n    }\n\n    return {\n      score: Math.round((score / maxScore) * 100),\n      missingElements,\n      recommendations\n    }\n  }\n\n  /**\n   * Analyze brand consistency\n   */\n  analyzeConsistency(brandKit: BrandKitData): {\n    score: number\n    issues: string[]\n    suggestions: string[]\n  } {\n    const issues: string[] = []\n    const suggestions: string[] = []\n    let score = 100\n\n    // Check color harmony\n    if (brandKit.colors && Object.keys(brandKit.colors).length > 1) {\n      const colors = Object.values(brandKit.colors).filter(Boolean) as string[]\n      // Simplified check - in reality would analyze color harmony\n      if (colors.length > 4) {\n        issues.push('Too many colors may reduce brand focus')\n        suggestions.push('Consider limiting to 3-4 core brand colors')\n        score -= 10\n      }\n    }\n\n    // Check naming consistency\n    if (brandKit.brand_name) {\n      if (brandKit.brand_name.includes('  ')) {\n        issues.push('Brand name has inconsistent spacing')\n        suggestions.push('Clean up spacing in brand name')\n        score -= 5\n      }\n    }\n\n    return {\n      score: Math.max(0, score),\n      issues,\n      suggestions\n    }\n  }\n}\n\n/**\n * Validation utilities\n */\nexport const ValidationUtils = {\n  /**\n   * Create validation summary\n   */\n  createValidationSummary(result: BrandValidationResult): string {\n    const parts: string[] = []\n    \n    parts.push(`Brand Strength: ${result.strength.toUpperCase()} (${result.score}/100)`)\n    \n    if (result.errors.length > 0) {\n      parts.push(`Errors: ${result.errors.length}`)\n    }\n    \n    if (result.warnings.length > 0) {\n      parts.push(`Warnings: ${result.warnings.length}`)\n    }\n    \n    if (result.recommendations.length > 0) {\n      parts.push(`Recommendations: ${result.recommendations.length}`)\n    }\n    \n    return parts.join(' | ')\n  },\n\n  /**\n   * Get next action recommendation\n   */\n  getNextActionRecommendation(result: BrandValidationResult): string {\n    if (result.errors.length > 0) {\n      return `Fix ${result.errors.length} error${result.errors.length > 1 ? 's' : ''} to improve your brand`\n    }\n    \n    if (!result.completeness.name) {\n      return 'Set your brand name to get started'\n    }\n    \n    if (!result.completeness.colors) {\n      return 'Add brand colors to establish visual identity'\n    }\n    \n    if (!result.completeness.assets) {\n      return 'Upload a logo to complete your brand kit'\n    }\n    \n    if (!result.completeness.messaging) {\n      return 'Add brand messaging to communicate your value'\n    }\n    \n    return 'Your brand kit is looking great! Consider fine-tuning details'\n  },\n\n  /**\n   * Filter validation results by severity\n   */\n  filterBySeverity(\n    errors: ValidationError[], \n    severity: ValidationError['severity']\n  ): ValidationError[] {\n    return errors.filter(error => error.severity === severity)\n  }\n} "],"mappings":"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","names":[]}