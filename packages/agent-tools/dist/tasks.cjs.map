{"version":3,"sources":["../src/tasks.ts"],"sourcesContent":["/**\n * @growthub/agent-tools/tasks\n * Agent Task Coordination and OpenAI Function Calling Abstractions\n * \n * Professional agent task patterns extracted from the AT-03 production system.\n * Provides simplified abstractions for OpenAI function calling and task coordination.\n */\n\nimport { z } from 'zod'\nimport type { CSI } from '@growthub/compiler-core'\n\n// Base schemas for all agent tasks\nexport const BaseAgentTaskRequestSchema = z.object({\n  threadId: z.string().uuid(),\n  userId: z.string().min(1),\n  agentType: z.enum(['CONTENT_GENERATION_AGENT', 'TEXT_ANALYSIS_AGENT']),\n  taskSequence: z.number().int().min(1),\n  previousCSI: z.object({\n    completedSteps: z.array(z.string()).default([]),\n    currentProgress: z.number().default(0),\n    totalSteps: z.number().default(4),\n    currentStep: z.string().default('pending')\n  }).optional(),\n})\n\nexport type BaseAgentTaskRequest = z.infer<typeof BaseAgentTaskRequestSchema>\n\n// Agent task function definition\nexport interface AgentTaskFunction {\n  name: string\n  description: string\n  parameters: {\n    type: \"object\"\n    properties: Record<string, any>\n    required: string[]\n  }\n}\n\n// Agent task execution result\nexport interface AgentTaskResult {\n  success: boolean\n  stepResult: {\n    step: string\n    [key: string]: any\n  }\n  updatedCSI: CSI\n  agentTaskId?: string\n  error?: {\n    message: string\n    code: string\n    details?: any\n  }\n}\n\n// Agent task configuration\nexport interface AgentTaskConfig {\n  taskName: string\n  taskType: 'analysis' | 'image_generation' | 'text_generation' | 'completion'\n  apiRoute?: string\n  toolName: string\n  systemPrompt: string\n  userPromptTemplate: (data: any) => string\n  functionDefinition: AgentTaskFunction\n  progressPercent: number\n  modelConfig?: {\n    model?: string\n    temperature?: number\n    maxTokens?: number\n    topP?: number\n  }\n}\n\n// OpenAI Client Interface\nexport interface OpenAIClient {\n  chat: {\n    completions: {\n      create(params: any): Promise<any>\n    }\n  }\n}\n\n/**\n * Agent Task Executor Class\n * Handles the complete lifecycle of agent tasks with OpenAI function calling\n */\nexport class AgentTaskExecutor {\n  private openaiClient: OpenAIClient\n  private defaultModel: string\n  private defaultTemperature: number\n\n  constructor(\n    openaiClient: OpenAIClient,\n    options: { \n      defaultModel?: string\n      defaultTemperature?: number \n    } = {}\n  ) {\n    this.openaiClient = openaiClient\n    this.defaultModel = options.defaultModel || 'gpt-4o-mini'\n    this.defaultTemperature = options.defaultTemperature || 0.3\n  }\n\n  /**\n   * Execute an agent task with OpenAI function calling\n   */\n  async executeAgentTask<T extends BaseAgentTaskRequest>(\n    request: T,\n    taskInput: Record<string, any>,\n    config: AgentTaskConfig\n  ): Promise<AgentTaskResult> {\n    try {\n      // Validate request\n      const validatedRequest = BaseAgentTaskRequestSchema.parse(request)\n\n      // Prepare OpenAI request\n      const modelConfig = config.modelConfig || {}\n      const response = await this.openaiClient.chat.completions.create({\n        model: modelConfig.model || this.defaultModel,\n        messages: [\n          {\n            role: \"system\",\n            content: config.systemPrompt\n          },\n          {\n            role: \"user\",\n            content: config.userPromptTemplate(taskInput)\n          }\n        ],\n        tools: [{ type: \"function\", function: config.functionDefinition }],\n        tool_choice: { type: \"function\", function: { name: config.functionDefinition.name } },\n        temperature: modelConfig.temperature ?? this.defaultTemperature,\n        ...(modelConfig.maxTokens && { max_tokens: modelConfig.maxTokens }),\n        ...(modelConfig.topP && { top_p: modelConfig.topP })\n      })\n\n      // Parse result\n      const toolCall = response.choices[0].message.tool_calls?.[0]\n      if (!toolCall) {\n        throw new Error('No function call returned from OpenAI')\n      }\n\n      const result = JSON.parse(toolCall.function.arguments || '{}')\n\n      // Update CSI\n      const previousCSI = validatedRequest.previousCSI || {\n        completedSteps: [],\n        currentProgress: 0,\n        totalSteps: 4,\n        currentStep: 'pending'\n      }\n\n      const updatedCSI: CSI = {\n        completedSteps: [...previousCSI.completedSteps, config.taskName],\n        currentProgress: config.progressPercent,\n        totalSteps: previousCSI.totalSteps,\n        currentStep: config.taskName,\n        metadata: {\n          lastUpdated: new Date().toISOString(),\n          taskName: config.taskName,\n          taskType: config.taskType\n        }\n      }\n\n      return {\n        success: true,\n        stepResult: { step: config.taskName, ...result },\n        updatedCSI\n      }\n\n    } catch (error) {\n      console.error(`[${config.taskName}] Failed:`, error)\n      \n      return {\n        success: false,\n        stepResult: { step: config.taskName },\n        updatedCSI: request.previousCSI || {\n          completedSteps: [],\n          currentProgress: 0,\n          totalSteps: 4,\n          currentStep: 'failed'\n        },\n        error: {\n          message: error instanceof Error ? error.message : 'Unknown error',\n          code: 'TASK_EXECUTION_FAILED',\n          details: error\n        }\n      }\n    }\n  }\n}\n\n/**\n * Predefined Agent Task Configurations\n * Common configurations for different agent task types\n */\nexport const AgentTaskConfigs = {\n  INTENT_ANALYSIS: {\n    taskName: 'intent_analysis',\n    taskType: 'analysis' as const,\n    apiRoute: '/api/v2/decomposition/intent-analysis',\n    toolName: 'o3_mini_intent_analyzer',\n    systemPrompt: 'Analyze user prompts for content generation tasks. Use causal reasoning to determine intent, asset count, and types.',\n    userPromptTemplate: (data: any) => \n      `Analyze: \"${data.prompt}\" for ${data.brandContext?.brand_name || 'brand'} (${data.brandContext?.referenceImages?.length || 0} ref images)`,\n    functionDefinition: {\n      name: \"analyze_intent\",\n      description: \"Analyzes user prompt for asset generation intent\",\n      parameters: {\n        type: \"object\" as const,\n        properties: {\n          analysis: { type: \"string\" },\n          conclusion: { type: \"string\" },\n          confidence: { type: \"number\" },\n          inferred_assets: { type: \"integer\" },\n          asset_types: { type: \"array\", items: { type: \"string\" } },\n          reasoning_steps: { type: \"array\", items: { type: \"string\" } }\n        },\n        required: [\"analysis\", \"conclusion\", \"confidence\", \"inferred_assets\"]\n      }\n    },\n    progressPercent: 25\n  },\n\n  BRAND_ANALYSIS: {\n    taskName: 'brand_analysis',\n    taskType: 'analysis' as const,\n    apiRoute: '/api/v2/decomposition/brand-analysis',\n    toolName: 'o3_mini_brand_analyzer',\n    systemPrompt: 'Analyze brand assets for content generation readiness. Assess completeness, consistency, and strength.',\n    userPromptTemplate: (data: any) => \n      `Analyze brand: ${data.brandContext?.brand_name || 'Unknown'}\nColors: ${data.brandContext?.colors ? JSON.stringify(data.brandContext.colors) : 'None'}\nMessaging: ${data.brandContext?.messaging || 'None'}\nReference Images: ${data.brandContext?.referenceImages?.length || 0}`,\n    functionDefinition: {\n      name: \"analyze_brand\",\n      description: \"Analyzes brand assets and context for content generation readiness\",\n      parameters: {\n        type: \"object\" as const,\n        properties: {\n          analysis: { type: \"string\" },\n          conclusion: { type: \"string\" },\n          confidence: { type: \"number\" },\n          brand_strength: { type: \"string\", enum: [\"weak\", \"moderate\", \"strong\", \"excellent\"] },\n          brand_consistency_score: { type: \"number\" },\n          recommendations: { type: \"array\", items: { type: \"string\" } }\n        },\n        required: [\"analysis\", \"conclusion\", \"confidence\", \"brand_strength\"]\n      }\n    },\n    progressPercent: 50\n  },\n\n  COMPLEXITY_ASSESSMENT: {\n    taskName: 'complexity_assessment',\n    taskType: 'analysis' as const,\n    apiRoute: '/api/v2/decomposition/complexity-assessment',\n    toolName: 'o3_mini_complexity_analyzer',\n    systemPrompt: 'Assess complexity for content generation tasks. Consider assets, brand strength, and execution requirements.',\n    userPromptTemplate: (data: any) => \n      `Assess complexity:\nPrompt: \"${data.prompt || ''}\"\nBrand: ${data.brandContext?.brand_name || 'Unknown'} (${data.brandStrength || 'Unknown'})\nAssets: ${data.inferredAssets || 1}\nReferences: ${data.brandContext?.referenceImages?.length || 0}`,\n    functionDefinition: {\n      name: \"assess_complexity\",\n      description: \"Assesses task complexity for content generation execution\",\n      parameters: {\n        type: \"object\" as const,\n        properties: {\n          analysis: { type: \"string\" },\n          conclusion: { type: \"string\" },\n          confidence: { type: \"number\" },\n          complexity_level: { type: \"string\", enum: [\"simple\", \"moderate\", \"complex\", \"expert\"] },\n          complexity_score: { type: \"number\" },\n          estimated_duration_ms: { type: \"integer\" },\n          resource_requirements: { type: \"array\", items: { type: \"string\" } },\n          optimization_suggestions: { type: \"array\", items: { type: \"string\" } }\n        },\n        required: [\"analysis\", \"conclusion\", \"confidence\", \"complexity_level\", \"complexity_score\"]\n      }\n    },\n    progressPercent: 75\n  }\n}\n\n/**\n * Task Builder - Fluent interface for building agent tasks\n */\nexport class AgentTaskBuilder {\n  private config: Partial<AgentTaskConfig> = {}\n\n  static create(taskName: string): AgentTaskBuilder {\n    return new AgentTaskBuilder().name(taskName)\n  }\n\n  name(taskName: string): AgentTaskBuilder {\n    this.config.taskName = taskName\n    return this\n  }\n\n  type(taskType: AgentTaskConfig['taskType']): AgentTaskBuilder {\n    this.config.taskType = taskType\n    return this\n  }\n\n  route(apiRoute: string): AgentTaskBuilder {\n    this.config.apiRoute = apiRoute\n    return this\n  }\n\n  tool(toolName: string): AgentTaskBuilder {\n    this.config.toolName = toolName\n    return this\n  }\n\n  systemPrompt(prompt: string): AgentTaskBuilder {\n    this.config.systemPrompt = prompt\n    return this\n  }\n\n  userPrompt(template: (data: any) => string): AgentTaskBuilder {\n    this.config.userPromptTemplate = template\n    return this\n  }\n\n  function(definition: AgentTaskFunction): AgentTaskBuilder {\n    this.config.functionDefinition = definition\n    return this\n  }\n\n  progress(percent: number): AgentTaskBuilder {\n    this.config.progressPercent = percent\n    return this\n  }\n\n  model(config: AgentTaskConfig['modelConfig']): AgentTaskBuilder {\n    this.config.modelConfig = config\n    return this\n  }\n\n  build(): AgentTaskConfig {\n    const required = [\n      'taskName', 'taskType', 'toolName', 'systemPrompt', \n      'userPromptTemplate', 'functionDefinition', 'progressPercent'\n    ]\n\n    for (const field of required) {\n      if (!this.config[field as keyof AgentTaskConfig]) {\n        throw new Error(`Missing required field: ${field}`)\n      }\n    }\n\n    return this.config as AgentTaskConfig\n  }\n}\n\n/**\n * Error handling utilities\n */\nexport function handleAgentTaskError(error: any, taskName: string) {\n  console.error(`[${taskName}] Failed:`, error)\n  \n  if (error instanceof z.ZodError) {\n    return {\n      success: false,\n      error: 'Invalid request data',\n      details: error.errors\n    }\n  }\n\n  return {\n    success: false,\n    error: `${taskName} failed`,\n    message: error instanceof Error ? error.message : 'Unknown error'\n  }\n}\n\n/**\n * Validate agent task request\n */\nexport function validateAgentTaskRequest(data: unknown): { success: boolean; data?: BaseAgentTaskRequest; errors?: any[] } {\n  try {\n    const validatedData = BaseAgentTaskRequestSchema.parse(data)\n    return { success: true, data: validatedData }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, errors: error.errors }\n    }\n    return { success: false, errors: [{ message: 'Unknown validation error' }] }\n  }\n}\n\n/**\n * Create task helpers using predefined configurations\n */\nexport const createTaskHelpers = (executor: AgentTaskExecutor) => ({\n  createIntentAnalysisTask: (request: BaseAgentTaskRequest & { prompt: string; brandContext: any }) => \n    executor.executeAgentTask(request, { prompt: request.prompt, brandContext: request.brandContext }, AgentTaskConfigs.INTENT_ANALYSIS),\n\n  createBrandAnalysisTask: (request: BaseAgentTaskRequest & { brandContext: any }) => \n    executor.executeAgentTask(request, { brandContext: request.brandContext }, AgentTaskConfigs.BRAND_ANALYSIS),\n\n  createComplexityAssessmentTask: (request: BaseAgentTaskRequest & { \n    prompt: string; \n    brandContext: any; \n    inferredAssets: number; \n    brandStrength: string \n  }) => \n    executor.executeAgentTask(request, { \n      prompt: request.prompt, \n      brandContext: request.brandContext, \n      inferredAssets: request.inferredAssets,\n      brandStrength: request.brandStrength \n    }, AgentTaskConfigs.COMPLEXITY_ASSESSMENT)\n}) "],"mappings":"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","names":[]}